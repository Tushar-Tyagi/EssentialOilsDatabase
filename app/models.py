from django.db import models
from django.core.validators import MaxValueValidator, MinValueValidator


class Metabolite(models.Model):
    """
    Class for storing the information related to a Metabolite.

    - name: string
        Name of the metabolite.
    - image: image, optional
        Image of the metabolite.
    """
    name = models.CharField(max_length=200)
    image = models.ImageField(null=True, blank=True)

    def __str__(self):
        return self.name


class EssentialOil(models.Model):
    """
    Class for storing the information related to an Essential Oil.

    - name: string
        Name of the oil.
    - abbr: string
        Abbreviation of the oil name.
    - scientific_name: string
        Scientific name of the plant from which the oil is extracted.
    - family: string
        Family to which the plant belongs to.
    - graph: image, optional
        Image of the graph generated by the machine.
    - metabolites: ManyToManyRelationship
        Used by Django to create a many-to-many relationship
    """
    name = models.CharField(max_length=200)
    abbr = models.CharField(max_length=10)
    scientific_name = models.CharField(max_length=200)
    family = models.CharField(max_length=100)
    graph = models.ImageField(null=True, blank=True)
    metabolites = models.ManyToManyField(Metabolite, through='Through')

    def __str__(self):
        return self.name


class Through(models.Model):
    """
    Class for storing the relationship between a metabolite and an oil.

    - metabolite: Metabolite
        Metabolite in the relationship.
    - oil: EssentialOil
        EssentialOil in the relationship.
    - identity: float
        Percentage match factor that the metabolite is present.
    - mzratio: float
        M/Z ratio (Product Ion) for the compound.
    - time: float
        Time at which the metabolite was found.
    - relative_abundance1: float
        Abundance of the metabolite in the first sample.
    - relative_abundance2: float
        Abundance of the metabolite in the second sample.
    - relative_abundance3: float
        Abundance of the metabolite in the third sample.
    - relative_abundance4: float
        Abundance of the metabolite in the fourth sample.
    """
    metabolite = models.ForeignKey(Metabolite, on_delete=models.CASCADE)
    oil = models.ForeignKey(EssentialOil, on_delete=models.CASCADE)
    identity = models.FloatField(validators=[MinValueValidator(0), MaxValueValidator(100), ])
    mzratio = models.FloatField()
    time = models.FloatField(validators=[MinValueValidator(0), ])
    relative_abundance1 = models.FloatField()
    relative_abundance2 = models.FloatField()
    relative_abundance3 = models.FloatField()
    relative_abundance4 = models.FloatField()

    def __str__(self):
        return self.oil.name + ' - ' + self.metabolite.name
